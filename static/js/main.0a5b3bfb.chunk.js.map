{"version":3,"sources":["components/Header/index.js","components/Game/index.js","components/Wrapper/index.js","components/GameCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","score","highScore","Game","children","Wrapper","GameCard","onClick","clickCount","id","src","image","alt","name","App","state","characters","find","object","index","clicked","setState","shuffle","endGame","this","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","forEach","character","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"swCAqBeA,MAjBf,SAAgBC,GAEZ,OAEI,yBAAKC,UAAU,uBACX,uBAAGC,KAAK,IAAID,UAAU,gBAAtB,4BACA,yBAAKA,UAAU,0BAAf,mCACA,0BAAMA,UAAU,eAChB,wCAAcD,EAAMG,MAApB,kBAA0CH,EAAMI,c,MCM7CC,MAff,SAAcL,GAGV,OACI,yBAAKC,UAAY,kBACb,yBAAKA,UAAW,8BAEXD,EAAMM,Y,MCIRC,MAVf,SAAiBP,GAET,OACI,yBAAKC,UAAY,WACZD,EAAMM,W,MCORE,MAZf,SAAkBR,GAEd,OACI,yBAAKC,UAAU,iBAAiBQ,QAAS,kBAAMT,EAAMU,WAAWV,EAAMW,MAClE,yBAAKC,IAAKZ,EAAMa,MAAOZ,UAAU,eAAea,IAAKd,EAAMe,S,OCgFxDC,E,2MA5EbC,MAAQ,CACNC,aACAf,MAAO,EACPC,UAAU,G,EA8BdM,WAAa,SAAAC,GACX,EAAKM,MAAMC,WAAWC,MAAK,SAACC,EAAQC,GAC9BD,EAAOT,KAAOA,IAAoC,IAA9BO,EAAWG,GAAOC,SACxCJ,EAAWG,GAAOC,SAAU,EAC5B,EAAKC,SAAS,CAACpB,MAAO,EAAKc,MAAMd,MAAO,IACxC,EAAKqB,QAAQN,IAEb,EAAKO,c,mFAhCPC,KAAKH,SAAS,CAACL,WAAYQ,KAAKF,QAAQE,KAAKT,MAAMC,gB,8BAI7CS,GAKN,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,I,gCAmBLD,KAAKT,MAAMd,MAAQuB,KAAKT,MAAMb,YAChCsB,KAAKH,SAAS,CAACnB,UAAWsB,KAAKT,MAAMd,QACrCuB,KAAKT,MAAMC,WAAWiB,SAAQ,SAAAC,GAAS,OAAIA,EAAUd,SAAU,KAC/DI,KAAKH,SAAS,CAACpB,MAAO,O,+BAId,IAAD,OACP,OAEE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQA,MAAOuB,KAAKT,MAAMd,MAAOC,UAAWsB,KAAKT,MAAMb,YACvD,kBAAC,EAAD,KACCsB,KAAKT,MAAMC,WAAWmB,KAAI,SAAAD,GAAS,OACpC,kBAAC,EAAD,CACE1B,WAAY,EAAKA,WACjBC,GAAIyB,EAAUzB,GACd2B,IAAKF,EAAUzB,GACfE,MAAOuB,EAAUvB,iB,GApET0B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0a5b3bfb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n\r\n        <nav className=\"navbar navbar-light\">\r\n            <a href=\"/\" className=\"navbar-brand\">Rick & Morty Clicky Game</a>\r\n            <div className=\"justify-content-center\">Don't Click the Same Pic Twice!</div>\r\n            <form className=\"form-inline\">\r\n            <span>Score: {props.score} | High Score: {props.highScore}</span>\r\n            </form>\r\n        </nav>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Header; ","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction Game(props){\r\n\r\n\r\n    return (\r\n        <div className = \"container mt-3\">\r\n            <div className =\"row justify-content-center\"> \r\n                {/* <h1>Testing Connection </h1>   ------- Test for Import  */}\r\n                {props.children}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Wrapper(props){\r\n\r\n        return (\r\n            <div className = \"wrapper\">\r\n                {props.children}\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default Wrapper; ","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nfunction GameCard(props) {\r\n\r\n    return (\r\n        <div className=\"card mx-2 my-1\" onClick={() => props.clickCount(props.id)} >\r\n            <img src={props.image} className=\"card-img-top\" alt={props.name} />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default GameCard;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Game from \"./components/Game\"\nimport Wrapper from \"./components/Wrapper\"\nimport GameCard from \"./components/GameCard\"\nimport characters from \"./characters.json\"\n\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score: 0,\n    highScore:0\n  }\n\n\n  componentDidMount(){\n    this.setState({characters: this.shuffle(this.state.characters)})\n  }; \n\n\n  shuffle(array) {\n    // Code found here: https://stackoverflow.com/questions/39680997/shuffle-javascript-array\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n\nclickCount = id => {\n  this.state.characters.find((object, index) => {\n    if (object.id === id && characters[index].clicked === false){\n      characters[index].clicked = true;\n      this.setState({score: this.state.score +1});\n      this.shuffle(characters);\n    } else{\n      this.endGame(); \n    }\n\n  })\n\n}\n\nendGame(){\n  if (this.state.score > this.state.highScore){\n    this.setState({highScore: this.state.score});\n    this.state.characters.forEach(character => character.clicked = false);\n    this.setState({score: 0}); \n  }\n}\n\n  render() {\n    return (\n\n      <Wrapper>\n        <Header score={this.state.score} highScore={this.state.highScore}/>\n        <Game>\n        {this.state.characters.map(character => (\n        <GameCard \n          clickCount={this.clickCount}\n          id={character.id}\n          key={character.id}\n          image={character.image}\n        />\n        ))}\n        </Game>\n      </Wrapper>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}